generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String       @id @default(cuid())
  username  String       @unique
  email     String       @unique
  password  String
  profile   userProfile?
  reviews   review[]
  likes     like[]
  comments  comment[]
  wishlist  wishlist?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model userProfile {
  id        Int     @id @default(autoincrement())
  bio       String?
  avatarUrl String?
  userId    String  @unique
  user      user    @relation(fields: [userId], references: [id])
}

model product {
  id          Int          @id @default(autoincrement())
  name        String
  brand       brand        @relation(fields: [brandId], references: [id])
  brandId     Int
  description String?
  reviews     review[]
  tags        productTag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  like        like[]
  comment     comment[]
  wishlist    wishlist?    @relation(fields: [wishlistId], references: [id])
  wishlistId  Int?
}

model brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products product[]
}

model review {
  id        Int       @id @default(autoincrement())
  rating    Int       @default(0)
  comment   String
  userId    String
  user      user      @relation(fields: [userId], references: [id])
  productId Int
  product   product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  like      like[]
  comments  comment[]
}

model tag {
  id       Int          @id @default(autoincrement())
  name     String       @unique
  products productTag[]
}

model productTag {
  productId Int
  tagId     Int
  product   product @relation(fields: [productId], references: [id])
  tag       tag     @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model like {
  id        Int      @id @default(autoincrement())
  userId    String
  user      user     @relation(fields: [userId], references: [id])
  reviewId  Int?
  productId Int?
  review    review?  @relation(fields: [reviewId], references: [id])
  product   product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  user      user     @relation(fields: [userId], references: [id])
  reviewId  Int?
  productId Int?
  review    review?  @relation(fields: [reviewId], references: [id])
  product   product? @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model wishlist {
  id       Int       @id @default(autoincrement())
  userId   String    @unique
  user     user      @relation(fields: [userId], references: [id])
  products product[]
}
